/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudyProgramICS4U;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;

/**
 *
 * @author repan6047
 */
public class QuizMenu extends javax.swing.JFrame {

    MainMenu mainWindow;
    private int questionCount, noCorrect;
    private ArrayList<Question> list;
    private ArrayList<String> answers;
    private String correctAnswer, results;
    /**
     * Creates new form QuizMenu
     */
    public QuizMenu(MainMenu m) {
        initComponents();
        mainWindow = m;
        list = m.getQList();
        Collections.shuffle(list); // shuffles the order of questions
        barProgress.setValue(0); // reset progress bar 
        questionCount = 0;
        noCorrect = 0;
        results = "RESULTS\n\n"; // initialize results output string
        updateQuestion(); // update the displayed question and answers
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblQuestion = new javax.swing.JLabel();
        rbOption1 = new javax.swing.JRadioButton();
        rbOption2 = new javax.swing.JRadioButton();
        rbOption3 = new javax.swing.JRadioButton();
        rbOption4 = new javax.swing.JRadioButton();
        barProgress = new javax.swing.JProgressBar();
        btnExit = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quiz Menu");
        setResizable(false);

        lblQuestion.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblQuestion.setText("Question:");

        buttonGroup1.add(rbOption1);
        rbOption1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbOption1.setSelected(true);
        rbOption1.setText("Option 1");

        buttonGroup1.add(rbOption2);
        rbOption2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbOption2.setText("Option 2");

        buttonGroup1.add(rbOption3);
        rbOption3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbOption3.setText("Option 3");

        buttonGroup1.add(rbOption4);
        rbOption4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        rbOption4.setText("Option 4");

        barProgress.setMaximum(10);
        barProgress.setToolTipText("");
        barProgress.setValue(3);

        btnExit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnSubmit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 753, Short.MAX_VALUE)
                        .addComponent(btnExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbOption1)
                            .addComponent(rbOption2)
                            .addComponent(rbOption3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbOption4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuestion)
                    .addComponent(btnExit))
                .addGap(18, 18, 18)
                .addComponent(rbOption1)
                .addGap(18, 18, 18)
                .addComponent(rbOption2)
                .addGap(18, 18, 18)
                .addComponent(rbOption3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOption4)
                    .addComponent(btnSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        mainWindow.setVisible(true); // display the main menu
        this.dispose(); // close the quiz menu
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        int selected = -1; 
        if (rbOption1.isSelected()) { // if the first option is selected...
            selected = 0;
        } else if (rbOption2.isSelected()) {
            selected = 1;
        } else if (rbOption3.isSelected()) {
            selected = 2;
        } else if (rbOption4.isSelected()) {
            selected = 3;
        }
        //if nothing is seleted, ask them to submit an answer
        if (selected == -1) {
            JOptionPane.showMessageDialog(null, "Please select an answer!");
        } else {//otherwise
            results += "Question " + questionCount + ": ";//build the results string
            if (answers.get(selected).equals(correctAnswer)) {//if it's correct
                noCorrect ++;//add to the correct number
                JOptionPane.showMessageDialog(null, "Correct!");//inform the user that it was correct
                results += "Correct\n";//add to the result string
            } else {//if incorrect
                JOptionPane.showMessageDialog(null, "Incorrect. The correct answer is: " + correctAnswer);//display the correct answer
                results += "Incorrect\n";//add to the results string
            }
            if (questionCount < 10) {//if there are more questions
                updateQuestion();//go next question
            } else {//otherwise
                results += "\nTotal score: " + noCorrect + "/10";//finalize results string
                NotesMenu n = new NotesMenu(this, mainWindow);//open the notes window as a results window
                n.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void updateQuestion() {
        answers = new ArrayList();//make an array list for the answers
        lblQuestion.setText(list.get(questionCount).getTitle());//put the question in the title
        for (int i = 0; i < 4; i ++) {//get the 4 answers
            answers.add(list.get(questionCount).getAnswer(i));
        }
        Collections.shuffle(answers);//shuffle the answers
        rbOption1.setText(answers.get(0));//fill the 4 answers
        rbOption2.setText(answers.get(1));
        rbOption3.setText(answers.get(2));
        rbOption4.setText(answers.get(3));
        correctAnswer = list.get(questionCount).getCorrect();//store the correct answer
        questionCount ++;//increase the question count
        barProgress.setValue(questionCount);//update the progress bar
    }
    
    public String getResults() {
        return results;//getter to return the results to the results window
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barProgress;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JRadioButton rbOption1;
    private javax.swing.JRadioButton rbOption2;
    private javax.swing.JRadioButton rbOption3;
    private javax.swing.JRadioButton rbOption4;
    // End of variables declaration//GEN-END:variables
}
